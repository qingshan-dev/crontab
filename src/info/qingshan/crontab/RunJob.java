package info.qingshan.crontab;import info.qingshan.crontab.common.ClassPathUtil;import info.qingshan.crontab.core.screenCapture.IntevelCaptureScreenJob;import info.qingshan.crontab.core.shell.ShellJob;import info.qingshan.crontab.job.lister.JobListener;import info.qingshan.crontab.job.lister.TriggerListener;import java.io.IOException;import java.util.Date;import java.util.Map;import java.util.UUID;import org.quartz.CronScheduleBuilder;import org.quartz.CronTrigger;import org.quartz.JobBuilder;import org.quartz.JobDetail;import org.quartz.Scheduler;import org.quartz.SchedulerException;import org.quartz.SchedulerFactory;import org.quartz.TriggerBuilder;import org.quartz.impl.StdSchedulerFactory;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;;/** * 用于配置/运行/关闭程序调度器 注:当前类使用的程序调度器是CronTrigger类型的,支持cron表达式 *  * @author qingshan * @date 2012-06-07 */public class RunJob {	private static final Logger	log	= LoggerFactory.getLogger(RunJob.class);	public static void main(String[] args) {		try {			startUp();		} catch (SchedulerException e) {			log.error("", e);		} catch (IOException e) {			log.error("", e);		}	}	private static void startUp() throws SchedulerException, IOException {		// 创建工厂		SchedulerFactory factory = new StdSchedulerFactory();		// 创建程序调度器实例		Scheduler scheduler = factory.getScheduler();		// 创建job		factory(scheduler);//		factory(scheduler, "0 0/5 9-19 * * ?", IntevelCaptureScreenJob.class);		// factory(scheduler, "0 0/30 0-3,22-23 * * ?", ShellJob.class);		// 开启所有已经配置job		scheduler.start();		// 加入监听器		scheduler.getListenerManager().addJobListener(new JobListener());		scheduler.getListenerManager()				.addTriggerListener(new TriggerListener());	}	private static void factory(Scheduler scheduler, String cron, Class jobClass, Map para) {		// 唯一标识		String uuid = UUID.randomUUID().toString();		// 创建一个job		JobDetail job = JobBuilder.newJob(jobClass)				.withIdentity(jobClass.getName() + "-" + uuid, jobClass.getName())				.build();		// 增加参数配置		job.getJobDataMap().putAll(para);		// 创建触发器:"* * * * * ?"==>每秒都很执行一次		CronTrigger trigger = TriggerBuilder.newTrigger()				.withIdentity(jobClass.getName() + "-" + uuid, jobClass.getName())				.withSchedule(CronScheduleBuilder.cronSchedule(cron)).build();		// .withSchedule(CronScheduleBuilder.cronSchedule("0 0/5 9-20 * * ?")).build();		// 执行的日期时间		try {			Date date = scheduler.scheduleJob(job, trigger);			log.info("key:{} \n将在 【{}】执行, CRON:【{}】", job.getKey().getName(),					String.format("%tF %1$tT", date),					trigger.getCronExpression());		} catch (SchedulerException e) {			e.printStackTrace();		}	}	private static void factory(Scheduler scheduler) throws IOException {		String json = ClassPathUtil.getString("ini.json");		log.info("读取配置: \n{}",json);		JSONObject config = JSON.parseObject(json);		JSONArray capture = config.getJSONArray("capture");		for (int i = 0; i < capture.size(); i++) {			JSONObject string = capture.getJSONObject(i);			Map<String, ?> map = (Map<String, ?>) string.clone();			String cron = string.getString("cron");			factory(scheduler, cron, IntevelCaptureScreenJob.class, map);		}		JSONArray shell = config.getJSONArray("shell");		for (int i = 0; i < shell.size(); i++) {			JSONObject string = shell.getJSONObject(i);			Map<String, ?> map = (Map<String, ?>) string.clone();			String cron = string.getString("cron");			factory(scheduler, cron, ShellJob.class, map);		}	}}